# Sample workflow for building and deploying a Next.js site to GitHub Pages
#
# To get started with Next.js see: https://nextjs.org/docs/getting-started
#
name: Deploy Next.js site to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]
    paths-ignore: ['api/**'] # Don't trigger on API changes

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    env:
      DEPLOY_TARGET: github-pages
      NODE_ENV: production
      # Add GitHub secrets as environment variables
      GHOST_URL: ${{ secrets.GHOST_URL }}
      GHOST_CONTENT_API_KEY: ${{ secrets.GHOST_CONTENT_API_KEY }}
      SITE_URL: https://gerardo.js.org
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Detect package manager
        id: detect-package-manager
        run: |
          if [ -f "${{ github.workspace }}/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "runner=yarn" >> $GITHUB_OUTPUT
            exit 0
          elif [ -f "${{ github.workspace }}/pnpm-lock.yaml" ]; then
            echo "manager=pnpm" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "runner=pnpm" >> $GITHUB_OUTPUT
            exit 0
          elif [ -f "${{ github.workspace }}/package.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            echo "runner=npx --no-install" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "Unable to determine package manager"
            exit 1
          fi

      - name: Setup pnpm
        if: steps.detect-package-manager.outputs.manager == 'pnpm'
        run: npm install -g pnpm

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: ${{ steps.detect-package-manager.outputs.manager }}

      - name: Configure GitHub Pages
        run: |
          echo "Configuring for GitHub Pages deployment"
          echo "Site URL: $SITE_URL"
          echo "Deploy Target: $DEPLOY_TARGET"

      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            .next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-

      - name: Install dependencies
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}

      - name: Build with Next.js for GitHub Pages
        run: |
          echo "üîç Debug: Environment variables during build"
          echo "DEPLOY_TARGET: $DEPLOY_TARGET"
          echo "NODE_ENV: $NODE_ENV"
          echo "GHOST_URL: $GHOST_URL"
          echo "GHOST_CONTENT_API_KEY present: $(if [ -n "$GHOST_CONTENT_API_KEY" ]; then echo 'yes'; else echo 'no'; fi)"
          echo "SITE_URL: $SITE_URL"
          echo ""
          echo "üöÄ Starting Next.js build..."
          ${{ steps.detect-package-manager.outputs.runner }} run build

      - name: Verify build output
        run: |
          echo "üîç Checking build output..."
          echo "Current directory contents:"
          ls -la ./
          echo ""
          echo "Next.js configuration that was used:"
          if [ -f "next.config.js" ]; then
            echo "Found next.config.js:"
            cat next.config.js
          fi
          if [ -f "next.config.mjs" ]; then
            echo "Found next.config.mjs:"
            cat next.config.mjs
          fi
          echo ""
          if [ -d "./out" ]; then
            echo "‚úÖ out directory exists"
            echo "Contents of out directory:"
            ls -la ./out
            echo ""
            echo "Sample files in out directory:"
            find ./out -type f -name "*.html" | head -5
          else
            echo "‚ùå out directory does not exist"
            echo ""
            echo "Checking .next directory:"
            if [ -d "./.next" ]; then
              echo ".next directory contents:"
              ls -la ./.next
              echo ""
              echo "Checking .next/standalone:"
              if [ -d "./.next/standalone" ]; then
                ls -la ./.next/standalone
              fi
            else
              echo ".next directory also does not exist"
            fi
            echo ""
            echo "This suggests the static export is not working. Check next.config.mjs configuration."
            exit 1
          fi

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./out

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: https://gerardo.js.org
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4